import { useActionState } from 'react';

type StateType = {
  text: string;
} | null

export function ActionState() {
  async function handleSubmit(prevState: StateType, formData: FormData): Promise<StateType> {
    
    await new Promise((resolve) => setTimeout(() => resolve("Success!"), 2500));

    const nome = formData.get("nome") as string;

    console.log(prevState); // O primeiro valor ser√° 'null', pois definimos 'null' como o estado inicial no useActionState.
    // Depois, a cada submiss√£o do formul√°rio, ele mostrar√° o estado anterior antes de ser atualizado.
    // OBS: O `prevState` n√£o √© obrigat√≥rio ser usado, mas pode ser √∫til para acessar ou comparar o estado anterior antes de definir um novo.

    if (!nome || nome.length < 4) {
      return {
        text: "DIGITE UM NOME MAIOR!"
      }
    }

    return {
      text: `Bem vindo(a) ${nome}`,
    }

  }

  // useActionState retorna um array com o estado e a fun√ß√£o para manipular o formul√°rio
  const [state, formAction, pending] = useActionState(handleSubmit, null);

  return (
    <div>
      <h1>useActionState</h1>

      <form action={formAction} >
        <input
          type="text"
          placeholder='Digite seu nome'
          name='nome'
        />

        <button type='submit' disabled={pending}>
          {pending ? "Enviando..." : "Cadastrar"}
        </button>
      </form>

      {state && <h1>{state.text}</h1>}
    </div>
  )
}

/* 
  O `useActionState` √© um hook do React 19 que gerencia o estado de a√ß√µes ass√≠ncronas em formul√°rios.

  Ele recebe dois par√¢metros:
  1Ô∏è‚É£ Uma fun√ß√£o ass√≠ncrona (handleSubmit) que processa os dados do formul√°rio e retorna um novo estado.
  2Ô∏è‚É£ O estado inicial, que pode ser `null` ou qualquer outro valor.

  Como funciona?
  - Quando o formul√°rio √© submetido, `handleSubmit` recebe: ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ
    üîπ `prevState`: O estado anterior da a√ß√£o.
    üîπ `formData`: Os dados enviados pelo formul√°rio.

  - O retorno de `handleSubmit` atualiza automaticamente o estado (`state`).

  - A fun√ß√£o `formAction`, gerada pelo `useActionState`, deve ser passada como `action` no formul√°rio.
*/


/* Explica√ß√£o do prevState
‚úÖ O prevState √© um par√¢metro opcional que o useActionState fornece para a fun√ß√£o de manipula√ß√£o da a√ß√£o.
‚úÖ Voc√™ n√£o precisa us√°-lo sempre, mas ele pode ser √∫til, por exemplo, para:

Comparar o estado anterior e o novo estado antes de atualizar.

Manter um hist√≥rico de estados (caso precise concatenar ou acumular informa√ß√µes).

Evitar atualiza√ß√µes desnecess√°rias se o novo estado for id√™ntico ao anterior.
*/

/*
üîπ Explica√ß√£o do `pending`
  ‚úÖ `pending` √© um booleano que indica se a a√ß√£o est√° em andamento.
  ‚úÖ Ele √© `true` enquanto `handleSubmit` est√° executando e `false` quando termina.
  ‚úÖ Usamos `pending` para desativar o bot√£o enquanto a submiss√£o acontece, evitando m√∫ltiplos envios.
*/